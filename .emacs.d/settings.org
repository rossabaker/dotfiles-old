* Security

[[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor is Malware]]

#+BEGIN_SRC emacs-lisp
(let ((trustfile
       (replace-regexp-in-string
        "\\\\" "/"
        (replace-regexp-in-string
         "\n" ""
         (shell-command-to-string "python -m certifi")))))
  (setq tls-program
        (list
         (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                 (if (eq window-system 'w32) ".exe" "") trustfile))))
#+END_SRC

This will slow down startup, but make sure we got it right.

#+BEGIN_SRC emacs-lisp
(let ((bad-hosts
       (cl-loop for bad
             in `("https://wrong.host.badssl.com/"
                  "https://self-signed.badssl.com/")
             if (condition-case e
                    (url-retrieve
                     bad (lambda (retrieved) t))
                  (error nil))
             collect bad)))
  (if bad-hosts
      (error (format "tls misconfigured; retrieved %s ok"
                     bad-hosts))
    (url-retrieve "https://badssl.com"
                  (lambda (retrieved) t))))
#+END_SRC

* Bootstrap packages

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
#+END_SRC

Lack of ~:ensure t~ has bitten me twice after two ~use-package~
invocations. No more.

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

* Better defaults

A quick and minimal way to fix a bunch of default irritants.

#+BEGIN_SRC emacs-lisp
(use-package "better-defaults")
#+END_SRC

Why in the world would I ever want to iconify my beloved Emacs?

#+BEGIN_SRC emacs-lisp
(when window-system
 (global-unset-key (kbd "C-z")))
#+END_SRC

Until I can have ~'head-nod-or-head-shake-p~

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Appearance
** Theme
kaolin is a more subtle theme than most.

#+BEGIN_SRC emacs-lisp
(use-package "kaolin-theme"
  :init
  (load-theme 'kaolin t))
#+END_SRC
** Cursor

Won't somebody please stop the blinking?

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

This helps us not lose the cursor.

#+BEGIN_SRC emacs-lisp
(use-package "beacon"
  :init (beacon-mode +1)
  :config (add-to-list 'beacon-dont-blink-major-modes 'sbt-mode)
  :bind (("C-c b" . beacon-blink)))
#+END_SRC

** Fonts

Fira Code is pretty and has good ligature support.

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-frame-font "Fira Code" t t))
#+END_SRC

To get that ligature support on the railwaycat Mac port, we can do
this.

#+BEGIN_SRC emacs-lisp
(when (functionp 'mac-auto-operator-composition-mode)
  (mac-auto-operator-composition-mode))
#+END_SRC

To get ligatures on other Emacs ports, see [[https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs][Setting up Emacs]].

** Startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
* Editing
** Line numbering
#+BEGIN_SRC emacs-lisp
(use-package "linum"
  :init
  (linum-mode t))
#+END_SRC

** Auto revert
Revert all the things. I'm targeting dired with this in particular,
but this seems a good idea in general.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
#+END_SRC

** Save place
We want to save our location when saving files

#+BEGIN_SRC emacs-lisp
(save-place-mode +1)
#+END_SRC
** Whitespace
** Expand region
#+BEGIN_SRC emacs-lisp
(use-package "expand-region"
  :bind (("C-=" . er/expand-region)))
#+END_SRC
*** Trailing
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

*** Tabs
What sort of society tolerates tab indentation?
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Indentation
Surprised this isn't a core function.

#+BEGIN_SRC emacs-lisp
(defun indent-buffer ()
  "Indent the entire buffer."
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))))
#+END_SRC
** Delete selection
Pressing a key should delete the active selection

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC
** Parens
#+BEGIN_SRC emacs-lisp
(use-package "rainbow-delimiters"
  :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Completion
I like ivy/swiper/counsel.  This is more or less the default config
from the [[http://oremacs.com/swiper/#introduction][Ivy User Manual]].

#+BEGIN_SRC emacs-lisp
(use-package "ivy"
  :diminish
  :init (ivy-mode)
  :config (setq ivy-use-virtual-buffers t
                ivy-count-format "(%d/%d) "
                magic-completing-read-function 'ivy-completing-read)
  :bind (("C-s" . swiper)
         ("C-c C-r" . ivy-resume)))

(use-package "counsel"
  :bind
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-h f" . counsel-describe-function)
  ("C-h v" . counsel-describe-variable)
  ("C-h l" . counsel-find-library)
  ("C-h i" . counsel-info-lookup-symbol)
  ("C-h u" . counsel-unicode-char)
  ("C-c g" . counsel-git)
  ("C-c j" . counsel-git-grep)
  ("C-c k" . counsel-ag)
  ("C-x l" . counsel-locate))

#+END_SRC
** Navigation
avy "jumps to visible text using a char-based decision tree."

#+BEGIN_SRC emacs-lisp
(use-package "avy"
  :config (avy-setup-default)
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-g f" . avy-goto-line)
         ("M-g w" . avy-goto-word-1)
         ("M-g e" . avy-goto-word-0)))
#+END_SRC

** Spell checking

#+BEGIN_SRC emacs-lisp
(use-package "flyspell"
  :diminish
  :init
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

* Window management
#+BEGIN_SRC emacs-lisp
(use-package "ace-window"
  :bind (("M-o" . ace-window)))
#+END_SRC
* Source control

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status))
  :diminish auto-revert-mode)
#+END_SRC

# Local Variables:
# org-src-preserve-indentation: t
# End:
* Programming
** Go
*** Templates
#+BEGIN_SRC emacs-lisp
(use-package "web-mode"
  :config (setq web-mode-engines-alist
                '(("go" . "\\.template\\'"))))

#+END_SRC
** JSON
"Programming"

#+BEGIN_SRC emacs-lisp
(use-package "json-mode")
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package "markdown-mode")
#+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
(use-package "ensime"
  :pin melpa-stable
  :config
  (add-hook 'scala-mode-hook
            (lambda ()
              (subword-mode +1)
              (scala-mode:goto-start-of-code)))

  (defun scala-mode-newline-comments ()
    "Custom newline appropriate for `scala-mode'."
    ;; shouldn't this be in a post-insert hook?
    (interactive)
    (newline-and-indent)
    (scala-indent:insert-asterisk-on-multiline-comment))

  (setq ensime-startup-notification nil
        ensime-startup-snapshot-notification nil)

  :bind (:map scala-mode-map
              ("RET" . scala-mode-newline-comments)))
#+END_SRC
** Yaml
(use-package "yaml-mode")
* Server

Emacs starts a little slow.  With the TLS test above, this Emacs
starts very slow.  We want a server.

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

