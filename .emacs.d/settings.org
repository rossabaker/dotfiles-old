* Security

[[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor is Malware]]

#+BEGIN_SRC emacs-lisp
(let ((trustfile
       (replace-regexp-in-string
        "\\\\" "/"
        (replace-regexp-in-string
         "\n" ""
         (shell-command-to-string "python -m certifi")))))
  (setq tls-program
        (list
         (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                 (if (eq window-system 'w32) ".exe" "") trustfile))))
#+END_SRC

This will slow down startup, but make sure we got it right.

#+BEGIN_SRC emacs-lisp
(let ((bad-hosts
       (cl-loop for bad
             in `("https://wrong.host.badssl.com/"
                  "https://self-signed.badssl.com/")
             if (condition-case e
                    (url-retrieve
                     bad (lambda (retrieved) t))
                  (error nil))
             collect bad)))
  (if bad-hosts
      (error (format "tls misconfigured; retrieved %s ok"
                     bad-hosts))
    (url-retrieve "https://badssl.com"
                  (lambda (retrieved) t))))
#+END_SRC

* Bootstrap packages

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
#+END_SRC

Lack of ~:ensure t~ has bitten me twice after two ~use-package~
invocations. No more.

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

* Better defaults

A quick and minimal way to fix a bunch of default irritants.

#+BEGIN_SRC emacs-lisp
(use-package "better-defaults")
#+END_SRC

* Appearance
** Theme
#+BEGIN_SRC emacs-lisp
(use-package "color-theme-sanityinc-tomorrow"
  :init
  (load-theme 'sanityinc-tomorrow-night t))
#+END_SRC
** Cursor

Won't somebody please stop the blinking?

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

** Fonts

Fira Code is pretty and has good ligature support.

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-frame-font "Fira Code" t t))
#+END_SRC

To get that ligature support on the railwaycat Mac port, we can do
this.

#+BEGIN_SRC emacs-lisp
(when (functionp 'mac-auto-operator-composition-mode)
  (mac-auto-operator-composition-mode))
#+END_SRC

To get ligatures on other Emacs ports, see [[https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs][Setting up Emacs]].

* Editing
** Line numbering
#+BEGIN_SRC emacs-lisp
(use-package "linum"
  :init
  (linum-mode t))
#+END_SRC

** Auto revert
Revert all the things. I'm targeting dired with this in particular,
but this seems a good idea in general.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
#+END_SRC

** Whitespace
*** Trailing
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

*** Tabs
What sort of society tolerates tab indentation?
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Parens
#+BEGIN_SRC emacs-lisp
(use-package "rainbow-delimiters"
  :init (rainbow-delimiters-mode))
#+END_SRC

* Window management
#+BEGIN_SRC emacs-lisp
(use-package "ace-window"
  :bind (("M-o" . ace-window)))
#+END_SRC
* Source control

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-c g" . magit-status))
  :diminish auto-revert-mode)
#+END_SRC

# Local Variables:
# org-src-preserve-indentation: t
# End:
* Programming
** Scala
#+BEGIN_SRC emacs-lisp
(use-package "ensime")
#+END_SRC
* Server

Emacs starts a little slow.  With the TLS test above, this Emacs
starts very slow.  We want a server.

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

